---
import '@fontsource-variable/plus-jakarta-sans'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'

interface Props {
  title: string
  description: string
}

const { title, description } = Astro.props
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/code.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-gray-200 dark:bg-[#001219]">
    <div class="absolute z-[-1] h-[700px] w-full flex justify-center">
      <div class="relative h-full w-full max-w-screen-xl py-24 ransform-gpu blur-3xl">
        <div id="polygon" class="h-full w-full bg-gradient-to-r from-[rgba(0,96,115)]  to-white/10 dark:bg-gradient-to-r dark:from-[rgba(233,216,166,.8)] dark:to-white/10  opacity-70 lg:opacity-40 transition-all duration-[3s]"
        ></div>
      </div>
    </div>
    <Header />
    <slot />
    <Footer />
  </body>
</html>
<style is:global>
  html {
    font-family: 'Plus Jakarta Sans Variable', sans-serif, system-ui;
    scroll-behavior: smooth;
    scrollbar-width: thin;
    scrollbar-color: #717171 #42424273;
  }
</style>
<script is:inline>
  const polygon = document.getElementById('polygon')
  polygon.style.clipPath = generarClipPath();
  function generarClipPath() {
    const points = Array.from({ length: 16 }, () => {
      const x = (Math.random() * 100).toFixed(2);
      const y = (Math.random() * 100).toFixed(2);
      return `${x}% ${y}%`;
    });
    return `polygon(${points.join(", ")})`;
  }
  setInterval(() => {
    polygon.style.clipPath = generarClipPath();
  }, 3000);
</script>
